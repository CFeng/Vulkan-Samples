#version 450
/* Copyright (c) 2020-2021, Arm Limited and Contributors
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#extension GL_EXT_shader_16bit_storage : require

layout(local_size_x = 8, local_size_y = 8) in;

layout(constant_id = 0) const uint WIDTH = 1;
layout(constant_id = 1) const uint HEIGHT = 1;

layout(set = 0, binding = 0) readonly buffer SSBO
{
    // It is possible to use native 16-bit types in SSBOs and UBOs. We could use uvec2 here and unpack manually.
    // The key feature of 16-bit storage is to allow scalar access to 16-bit values however.
    // Avoiding extra unpacking and packing can also be useful.
    f16vec4 blob_data[];
};

layout(rgba16f, set = 0, binding = 1) writeonly uniform mediump image2D o_results;

layout(push_constant) uniform Registers
{
    uint num_blobs;
    float seed;
    ivec2 range;
} registers;

void main()
{
    imageStore(o_results, ivec2(gl_GlobalInvocationID.xy), vec4(blob_data[0]));
}
